
LED_delay_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000556  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001aa  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ee       	ldi	r30, 0xEC	; 236
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	4e c0       	rjmp	.+156    	; 0xe8 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
                0b00001111,0b00011111,
                0b00111111,0b01111111};

int main(void)
{
    DDRD = 0b11111111;  // светодиоды. настроили порт навыход
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
    DDRB = 0b00000000;  // кнопки. настроили порты на входы
  52:	17 ba       	out	0x17, r1	; 23
    PORTD = 0b00000000; // светодиод. подали на порты низкий уровень сигнала
  54:	12 ba       	out	0x12, r1	; 18
    PORTB = 0b11111111; // кнопка. подали на порты высокий уровень сигнала
  56:	88 bb       	out	0x18, r24	; 24
    
    while (1)
    {
        if (PINB == 0b11111110)	// если первая кнопка нажата
  58:	86 b3       	in	r24, 0x16	; 22
  5a:	8e 3f       	cpi	r24, 0xFE	; 254
  5c:	81 f4       	brne	.+32     	; 0x7e <main+0x30>
        {
            PORTD = 0b11111111;	// подаем высокий уровень сигнала на выходы 
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	8f e4       	ldi	r24, 0x4F	; 79
  64:	93 ec       	ldi	r25, 0xC3	; 195
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <main+0x18>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <main+0x1e>
  6c:	00 00       	nop
            _delay_ms(sec);		// задержка
            PORTD = 0b00000000;	// подаем назкий уровень сигнала на выходы
  6e:	12 ba       	out	0x12, r1	; 18
  70:	ef e4       	ldi	r30, 0x4F	; 79
  72:	f3 ec       	ldi	r31, 0xC3	; 195
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <main+0x26>
  78:	00 c0       	rjmp	.+0      	; 0x7a <main+0x2c>
  7a:	00 00       	nop
  7c:	ed cf       	rjmp	.-38     	; 0x58 <main+0xa>
            _delay_ms(sec);		// задержка
        }
		else if (PINB == 0b11111101)	// если вторая кнопка нажата
  7e:	86 b3       	in	r24, 0x16	; 22
  80:	8d 3f       	cpi	r24, 0xFD	; 253
  82:	81 f5       	brne	.+96     	; 0xe4 <main+0x96>
  84:	29 c0       	rjmp	.+82     	; 0xd8 <main+0x8a>
  86:	8f e4       	ldi	r24, 0x4F	; 79
  88:	93 ec       	ldi	r25, 0xC3	; 195
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x3c>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x42>
  90:	00 00       	nop
		{
			for (int i = 0; i <= 8; PORTD |= ports_on[i++])	// запускаем цикл на подачу высокого уровня сигнала
			{
				_delay_ms(sec);	// задержка
				if (PORTD == 0b11111111)	// если на всех портах высокий уровень сигнала
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	a1 f4       	brne	.+40     	; 0xc0 <main+0x72>
  98:	0f c0       	rjmp	.+30     	; 0xb8 <main+0x6a>
  9a:	ef e4       	ldi	r30, 0x4F	; 79
  9c:	f3 ec       	ldi	r31, 0xC3	; 195
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x50>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x56>
  a4:	00 00       	nop
				{
					for (int y = 7; y >= 0; PORTD = ports_off[y--])   // запускаем обратный цикл на смену сигнала портов
  a6:	fc 01       	movw	r30, r24
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	e0 5a       	subi	r30, 0xA0	; 160
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	20 81       	ld	r18, Z
  b2:	22 bb       	out	0x12, r18	; 18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x6e>
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	99 23       	and	r25, r25
  be:	6c f7       	brge	.-38     	; 0x9a <main+0x4c>
            PORTD = 0b00000000;	// подаем назкий уровень сигнала на выходы
            _delay_ms(sec);		// задержка
        }
		else if (PINB == 0b11111101)	// если вторая кнопка нажата
		{
			for (int i = 0; i <= 8; PORTD |= ports_on[i++])	// запускаем цикл на подачу высокого уровня сигнала
  c0:	fa 01       	movw	r30, r20
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	e0 59       	subi	r30, 0x90	; 144
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	80 81       	ld	r24, Z
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	89 2b       	or	r24, r25
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	4f 5f       	subi	r20, 0xFF	; 255
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x8e>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	49 30       	cpi	r20, 0x09	; 9
  de:	51 05       	cpc	r21, r1
  e0:	94 f2       	brlt	.-92     	; 0x86 <main+0x38>
  e2:	ba cf       	rjmp	.-140    	; 0x58 <main+0xa>
				}
			}
		} 
		else					// если ни одна кнопка не нажата
		{	
			PORTD = 0b00000000;	// подаем низкий уровень сигнала на выходы
  e4:	12 ba       	out	0x12, r1	; 18
  e6:	b8 cf       	rjmp	.-144    	; 0x58 <main+0xa>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
