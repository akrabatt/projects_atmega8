
LED_delay_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057a  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004df  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021d  00000000  00000000  00000c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c2  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec eb       	ldi	r30, 0xBC	; 188
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	36 c0       	rjmp	.+108    	; 0xb8 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
                0b00001111,0b00011111,
                0b00111111,0b01111111};

int main(void)
{
    DDRD = 0b11111111;  // светодиоды. настроили порт навыход
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
    DDRB = 0b00000000;  // кнопки. настроили порты на входы
  52:	17 ba       	out	0x17, r1	; 23
    PORTD = 0b00000000; // светодиод. подали на порты низкий уровень сигнала
  54:	12 ba       	out	0x12, r1	; 18
    PORTB = 0b11111111; // кнопка. подали на порты высокий уровень сигнала
  56:	88 bb       	out	0x18, r24	; 24
    
    while (1)
    {
        if (PINB == 0b11111110)	// если первая кнопка нажата
  58:	86 b3       	in	r24, 0x16	; 22
  5a:	8e 3f       	cpi	r24, 0xFE	; 254
  5c:	21 f4       	brne	.+8      	; 0x66 <main+0x18>
        {
            PORTD = 0b11111111;	// подаем высокий уровень сигнала на выходы 
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	82 bb       	out	0x12, r24	; 18
            //_delay_ms(sec);		// задержка
            PORTD = 0b00000000;	// подаем назкий уровень сигнала на выходы
  62:	12 ba       	out	0x12, r1	; 18
  64:	f9 cf       	rjmp	.-14     	; 0x58 <main+0xa>
            //_delay_ms(sec);		// задержка
        }
		else if (PINB == 0b11111101)	// если вторая кнопка нажата
  66:	86 b3       	in	r24, 0x16	; 22
  68:	8d 3f       	cpi	r24, 0xFD	; 253
  6a:	21 f5       	brne	.+72     	; 0xb4 <main+0x66>
  6c:	1d c0       	rjmp	.+58     	; 0xa8 <main+0x5a>
		{
			for (int i = 0; i <= 8; i++)	// запускаем цикл 
			{
				PORTD |= ports_on[i];	// подаем высокий сигнал на порты по очереди
  6e:	92 b3       	in	r25, 0x12	; 18
  70:	fa 01       	movw	r30, r20
  72:	ee 0f       	add	r30, r30
  74:	ff 1f       	adc	r31, r31
  76:	e0 59       	subi	r30, 0x90	; 144
  78:	ff 4f       	sbci	r31, 0xFF	; 255
  7a:	80 81       	ld	r24, Z
  7c:	89 2b       	or	r24, r25
  7e:	82 bb       	out	0x12, r24	; 18
				//_delay_ms(sec);
				if (PORTD == 0b11111111)	// если на всех портах высокий уровень сигнала
  80:	82 b3       	in	r24, 0x12	; 18
  82:	8f 3f       	cpi	r24, 0xFF	; 255
  84:	71 f4       	brne	.+28     	; 0xa2 <main+0x54>
  86:	09 c0       	rjmp	.+18     	; 0x9a <main+0x4c>
				{
					for (int y = 8; y >= 0; y--)
					{
						PORTD = ports_off[y];
  88:	fc 01       	movw	r30, r24
  8a:	ee 0f       	add	r30, r30
  8c:	ff 1f       	adc	r31, r31
  8e:	e0 5a       	subi	r30, 0xA0	; 160
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	20 81       	ld	r18, Z
  94:	22 bb       	out	0x12, r18	; 18
			{
				PORTD |= ports_on[i];	// подаем высокий сигнал на порты по очереди
				//_delay_ms(sec);
				if (PORTD == 0b11111111)	// если на всех портах высокий уровень сигнала
				{
					for (int y = 8; y >= 0; y--)
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x50>
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	99 23       	and	r25, r25
  a0:	9c f7       	brge	.-26     	; 0x88 <main+0x3a>
            PORTD = 0b00000000;	// подаем назкий уровень сигнала на выходы
            //_delay_ms(sec);		// задержка
        }
		else if (PINB == 0b11111101)	// если вторая кнопка нажата
		{
			for (int i = 0; i <= 8; i++)	// запускаем цикл 
  a2:	4f 5f       	subi	r20, 0xFF	; 255
  a4:	5f 4f       	sbci	r21, 0xFF	; 255
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x5e>
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	49 30       	cpi	r20, 0x09	; 9
  ae:	51 05       	cpc	r21, r1
  b0:	f4 f2       	brlt	.-68     	; 0x6e <main+0x20>
  b2:	d2 cf       	rjmp	.-92     	; 0x58 <main+0xa>
				}
			}
		} 
		else					// если ни одна кнопка не нажата
		{	
			PORTD = 0b00000000;	// подаем низкий уровень сигнала на выходы
  b4:	12 ba       	out	0x12, r1	; 18
  b6:	d0 cf       	rjmp	.-96     	; 0x58 <main+0xa>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
