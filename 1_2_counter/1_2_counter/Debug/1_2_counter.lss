
1_2_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000072  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000522  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b3  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1c c0       	rjmp	.+56     	; 0x6e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
    DDRD = 0b11111111;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
    PORTD = 0b00000000;
  3c:	12 ba       	out	0x12, r1	; 18
    
    TCCR2 |= (1 << 2) | (1 << 1) | (1 << 0);  // инициализируем предделитель на 64
  3e:	85 b5       	in	r24, 0x25	; 37
  40:	87 60       	ori	r24, 0x07	; 7
  42:	85 bd       	out	0x25, r24	; 37
    TCNT2 = 0; // обнуляем счетчик
  44:	14 bc       	out	0x24, r1	; 36
#define F_CPU 1000000UL // принудительно задаем частоту
#include <avr/io.h>


int main(void)
{
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
    
    int x = 0;

    while (1) 
    {
        if (TCNT2 == 1)                                                                 
  4a:	24 b5       	in	r18, 0x24	; 36
  4c:	21 30       	cpi	r18, 0x01	; 1
  4e:	11 f4       	brne	.+4      	; 0x54 <__SREG__+0x15>
        {
            x++;
  50:	01 96       	adiw	r24, 0x01	; 1
            TCNT2 = 0;
  52:	14 bc       	out	0x24, r1	; 36
        }
        if (x == 488)  // при заполнении счетчика на половину
  54:	88 3e       	cpi	r24, 0xE8	; 232
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	92 07       	cpc	r25, r18
  5a:	11 f4       	brne	.+4      	; 0x60 <__SREG__+0x21>
        {
            PORTD = 0b00001111;
  5c:	2f e0       	ldi	r18, 0x0F	; 15
  5e:	22 bb       	out	0x12, r18	; 18
        }
        if (x == 976)
  60:	80 3d       	cpi	r24, 0xD0	; 208
  62:	23 e0       	ldi	r18, 0x03	; 3
  64:	92 07       	cpc	r25, r18
  66:	89 f7       	brne	.-30     	; 0x4a <__SREG__+0xb>
        {
        	PORTD = 0b11110000;
  68:	80 ef       	ldi	r24, 0xF0	; 240
  6a:	82 bb       	out	0x12, r24	; 18
  6c:	ec cf       	rjmp	.-40     	; 0x46 <__SREG__+0x7>

0000006e <_exit>:
  6e:	f8 94       	cli

00000070 <__stop_program>:
  70:	ff cf       	rjmp	.-2      	; 0x70 <__stop_program>
