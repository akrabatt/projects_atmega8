
1_2_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052f  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b3  00000000  00000000  0000068b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000044  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	20 c0       	rjmp	.+64     	; 0x76 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
    DDRD = 0b11111111;  // обозначаем выходы светодиодов
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
    PORTD = 0b00000000; // обозначаем низкий уровень сигнала на выходы светодиодов 
  3c:	12 ba       	out	0x12, r1	; 18

    DDRB = (0 << 0) | (0 << 1); // обозначаем выходы кнопок 
  3e:	17 ba       	out	0x17, r1	; 23
    PORTB = (1 << 0) | (1 << 1); // включаем подт€гивающий резистор 
  40:	83 e0       	ldi	r24, 0x03	; 3
  42:	88 bb       	out	0x18, r24	; 24
    
    TCCR0 = (1 << 0);  // 
  44:	81 e0       	ldi	r24, 0x01	; 1
  46:	83 bf       	out	0x33, r24	; 51
    //TCCR2 = (1 << 2) | (1 << 1) | (1 << 0);  // инициализируем предделитель на 1024
    TCNT0 = 0; // обнул€ем счетчик
  48:	12 be       	out	0x32, r1	; 50
    
    int x = 0; // переменна€ дл€ счетчика
    int a = 0;  // переменна€ дл€ флага включени€ и отключени€ счетчика по кнопкам 
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0

    while (1) 
    {
        if (~PINB & (1 << 0)) a = 1;    // при нажатии на 1-ю кнопку ставим флаг 
  4e:	b0 99       	sbic	0x16, 0	; 22
  50:	02 c0       	rjmp	.+4      	; 0x56 <__SREG__+0x17>
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	90 e0       	ldi	r25, 0x00	; 0
        if (PINB & (1 << 0) && a == 1)  // запускаем счетчик
  56:	b0 9b       	sbis	0x16, 0	; 22
  58:	fa cf       	rjmp	.-12     	; 0x4e <__SREG__+0xf>
  5a:	81 30       	cpi	r24, 0x01	; 1
  5c:	91 05       	cpc	r25, r1
  5e:	b9 f7       	brne	.-18     	; 0x4e <__SREG__+0xf>
        {
            if (TCNT0 >= 0)                                                                 
  60:	22 b7       	in	r18, 0x32	; 50
            {
                x++;
                TCNT0 = 0;
  62:	12 be       	out	0x32, r1	; 50
            if (x == 1000000)
            {
                PORTD = 0b11110000;
                x = 0;
            }
            if(~PINB & (1 << 1) && a == 1)  // при нажатии на 2-ю кнопку выключаем
  64:	b1 99       	sbic	0x16, 1	; 22
  66:	f3 cf       	rjmp	.-26     	; 0x4e <__SREG__+0xf>
  68:	81 30       	cpi	r24, 0x01	; 1
  6a:	91 05       	cpc	r25, r1
  6c:	81 f7       	brne	.-32     	; 0x4e <__SREG__+0xf>
            {
                a = 0;
                PORTD = 0b00000000;
  6e:	12 ba       	out	0x12, r1	; 18
                PORTD = 0b11110000;
                x = 0;
            }
            if(~PINB & (1 << 1) && a == 1)  // при нажатии на 2-ю кнопку выключаем
            {
                a = 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	ec cf       	rjmp	.-40     	; 0x4e <__SREG__+0xf>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
