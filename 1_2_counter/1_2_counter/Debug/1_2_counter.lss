
1_2_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052f  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b3  00000000  00000000  000006b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	34 c0       	rjmp	.+104    	; 0x9e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
    DDRD = 0b11111111;	// обозначаем выходы светодиодов
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
    PORTD = 0b00000000;	// обозначаем низкий уровень сигнала на выходы светодиодов 
  3c:	12 ba       	out	0x12, r1	; 18

    DDRB = (0 << 0) | (0 << 1);	// обозначаем выходы кнопок 
  3e:	17 ba       	out	0x17, r1	; 23
    PORTB = (1 << 0) | (1 << 1); // включаем подт€гивающий резистор 
  40:	83 e0       	ldi	r24, 0x03	; 3
  42:	88 bb       	out	0x18, r24	; 24
    
    TCCR2 = (1 << 2) | (1 << 1) | (1 << 0);  // инициализируем предделитель на 64
  44:	87 e0       	ldi	r24, 0x07	; 7
  46:	85 bd       	out	0x25, r24	; 37
    TCNT2 = 0; // обнул€ем счетчик
  48:	14 bc       	out	0x24, r1	; 36
    
    int x = 0; // переменна€ дл€ счетчика
    int a = 0;	// переменна€ дл€ флага включени€ и отключени€ счетчика по кнопкам 
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
    PORTB = (1 << 0) | (1 << 1); // включаем подт€гивающий резистор 
    
    TCCR2 = (1 << 2) | (1 << 1) | (1 << 0);  // инициализируем предделитель на 64
    TCNT2 = 0; // обнул€ем счетчик
    
    int x = 0; // переменна€ дл€ счетчика
  4e:	20 e0       	ldi	r18, 0x00	; 0
  50:	30 e0       	ldi	r19, 0x00	; 0
    int a = 0;	// переменна€ дл€ флага включени€ и отключени€ счетчика по кнопкам 

    while (1) 
    {
    	if (~PINB & (1 << 0)) a = 1;	// при нажатии на 1-ю кнопку ставим флаг 
  52:	b0 99       	sbic	0x16, 0	; 22
  54:	02 c0       	rjmp	.+4      	; 0x5a <__SREG__+0x1b>
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	90 e0       	ldi	r25, 0x00	; 0
    	if (PINB & (1 << 0) && a == 1)	// запускаем счетчик
  5a:	b0 9b       	sbis	0x16, 0	; 22
  5c:	fa cf       	rjmp	.-12     	; 0x52 <__SREG__+0x13>
  5e:	81 30       	cpi	r24, 0x01	; 1
  60:	91 05       	cpc	r25, r1
  62:	b9 f7       	brne	.-18     	; 0x52 <__SREG__+0x13>
    	{
    		if (TCNT2 == 1)                                                                 
  64:	44 b5       	in	r20, 0x24	; 36
  66:	41 30       	cpi	r20, 0x01	; 1
  68:	19 f4       	brne	.+6      	; 0x70 <__SREG__+0x31>
        	{
            	x++;
  6a:	2f 5f       	subi	r18, 0xFF	; 255
  6c:	3f 4f       	sbci	r19, 0xFF	; 255
            	TCNT2 = 0;
  6e:	14 bc       	out	0x24, r1	; 36
        	}
        	if (x == 488)  // при заполнении счетчика на половину
  70:	28 3e       	cpi	r18, 0xE8	; 232
  72:	41 e0       	ldi	r20, 0x01	; 1
  74:	34 07       	cpc	r19, r20
  76:	11 f4       	brne	.+4      	; 0x7c <__SREG__+0x3d>
        	{
            	PORTD = 0b00001111;
  78:	4f e0       	ldi	r20, 0x0F	; 15
  7a:	42 bb       	out	0x12, r20	; 18
        	}
        	if (x == 976)
  7c:	20 3d       	cpi	r18, 0xD0	; 208
  7e:	43 e0       	ldi	r20, 0x03	; 3
  80:	34 07       	cpc	r19, r20
  82:	21 f4       	brne	.+8      	; 0x8c <__SREG__+0x4d>
        	{
        		PORTD = 0b11110000;
  84:	20 ef       	ldi	r18, 0xF0	; 240
  86:	22 bb       	out	0x12, r18	; 18
        		x = 0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
        	}
        	if(~PINB & (1 << 1) && a == 1)	// при нажатии на 2-ю кнопку выключаем
  8c:	b1 99       	sbic	0x16, 1	; 22
  8e:	e1 cf       	rjmp	.-62     	; 0x52 <__SREG__+0x13>
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	f1 f6       	brne	.-68     	; 0x52 <__SREG__+0x13>
        	{
        		a = 0;
        		PORTD = 0b00000000;
  96:	12 ba       	out	0x12, r1	; 18
        		PORTD = 0b11110000;
        		x = 0;
        	}
        	if(~PINB & (1 << 1) && a == 1)	// при нажатии на 2-ю кнопку выключаем
        	{
        		a = 0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	da cf       	rjmp	.-76     	; 0x52 <__SREG__+0x13>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
