
LED_segment_indikator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064e  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000567  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000319  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e1       	ldi	r30, 0x1C	; 28
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	5e c0       	rjmp	.+188    	; 0x118 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
			 
int redg[] = {};

int main(void)
{
	DDRD = 0b11111111;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000000;
  62:	17 ba       	out	0x17, r1	; 23
	DDRC = 0b00000011;
  64:	83 e0       	ldi	r24, 0x03	; 3
  66:	84 bb       	out	0x14, r24	; 20
	PORTB = 0b00000011;
  68:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00000000;
  6a:	12 ba       	out	0x12, r1	; 18
	PORTC = 0b00000011;
  6c:	85 bb       	out	0x15, r24	; 21
	int y = 0;
	int up = 0;
	int down = 0;
  6e:	40 e0       	ldi	r20, 0x00	; 0
  70:	50 e0       	ldi	r21, 0x00	; 0
	DDRC = 0b00000011;
	PORTB = 0b00000011;
	PORTD = 0b00000000;
	PORTC = 0b00000011;
	int y = 0;
	int up = 0;
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	70 e0       	ldi	r23, 0x00	; 0
	DDRB = 0b00000000;
	DDRC = 0b00000011;
	PORTB = 0b00000011;
	PORTD = 0b00000000;
	PORTC = 0b00000011;
	int y = 0;
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	04 c0       	rjmp	.+8      	; 0x84 <main+0x26>
			if (y == 10) y = 0;	// сброс счетчика при достижении лимита 
		}
		if (PINB == 0b00000001) down = 1;	// устанавливаем флаг
		if ((PINB == 0b00000011) && down == 1)	// цикл на уменьшение
		{
			down = 0;
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
			PORTC = 0b00000010;
			PORTD = nums[y--];
			_delay_ms(30);
			if (y < 0) y = 9;	// сброс счетчика при достижении лимита 
  80:	29 e0       	ldi	r18, 0x09	; 9
  82:	30 e0       	ldi	r19, 0x00	; 0
	
	// PORTC - где ноль там и не работает
	
    while (1) 
    {
		if (PINB == 0b00000010) up = 1;	// устанавливаем флаг
  84:	86 b3       	in	r24, 0x16	; 22
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	11 f4       	brne	.+4      	; 0x8e <main+0x30>
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	70 e0       	ldi	r23, 0x00	; 0
		if ((PINB == 0b00000011) && up == 1)	// при нажатии кнопки снимаем флаг и запускаем счетчик. на увеличение
  8e:	86 b3       	in	r24, 0x16	; 22
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	f9 f4       	brne	.+62     	; 0xd2 <main+0x74>
  94:	61 30       	cpi	r22, 0x01	; 1
  96:	71 05       	cpc	r23, r1
  98:	e1 f4       	brne	.+56     	; 0xd2 <main+0x74>
		{
			up = 0;
			PORTC = 0b00000010;
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	85 bb       	out	0x15, r24	; 21
			PORTD = nums[y++];
  9e:	c9 01       	movw	r24, r18
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	f9 01       	movw	r30, r18
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	20 81       	ld	r18, Z
  ae:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	eb e4       	ldi	r30, 0x4B	; 75
  b2:	fd e1       	ldi	r31, 0x1D	; 29
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x56>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x5c>
  ba:	00 00       	nop
			_delay_ms(30);
			if (y == 10) y = 0;	// сброс счетчика при достижении лимита 
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	91 05       	cpc	r25, r1
  c0:	21 f0       	breq	.+8      	; 0xca <main+0x6c>
		if (PINB == 0b00000010) up = 1;	// устанавливаем флаг
		if ((PINB == 0b00000011) && up == 1)	// при нажатии кнопки снимаем флаг и запускаем счетчик. на увеличение
		{
			up = 0;
			PORTC = 0b00000010;
			PORTD = nums[y++];
  c2:	9c 01       	movw	r18, r24
    while (1) 
    {
		if (PINB == 0b00000010) up = 1;	// устанавливаем флаг
		if ((PINB == 0b00000011) && up == 1)	// при нажатии кнопки снимаем флаг и запускаем счетчик. на увеличение
		{
			up = 0;
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <main+0x74>
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
			PORTC = 0b00000010;
			PORTD = nums[y++];
			_delay_ms(30);
			if (y == 10) y = 0;	// сброс счетчика при достижении лимита 
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
		}
		if (PINB == 0b00000001) down = 1;	// устанавливаем флаг
  d2:	86 b3       	in	r24, 0x16	; 22
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	11 f4       	brne	.+4      	; 0xdc <main+0x7e>
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	50 e0       	ldi	r21, 0x00	; 0
		if ((PINB == 0b00000011) && down == 1)	// цикл на уменьшение
  dc:	86 b3       	in	r24, 0x16	; 22
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	89 f6       	brne	.-94     	; 0x84 <main+0x26>
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	51 05       	cpc	r21, r1
  e6:	71 f6       	brne	.-100    	; 0x84 <main+0x26>
		{
			down = 0;
			PORTC = 0b00000010;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	85 bb       	out	0x15, r24	; 21
			PORTD = nums[y--];
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	f9 01       	movw	r30, r18
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	20 81       	ld	r18, Z
  fc:	22 bb       	out	0x12, r18	; 18
  fe:	eb e4       	ldi	r30, 0x4B	; 75
 100:	fd e1       	ldi	r31, 0x1D	; 29
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0xa4>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0xaa>
 108:	00 00       	nop
			_delay_ms(30);
			if (y < 0) y = 9;	// сброс счетчика при достижении лимита 
 10a:	99 23       	and	r25, r25
 10c:	0c f4       	brge	.+2      	; 0x110 <main+0xb2>
 10e:	b6 cf       	rjmp	.-148    	; 0x7c <main+0x1e>
		if (PINB == 0b00000001) down = 1;	// устанавливаем флаг
		if ((PINB == 0b00000011) && down == 1)	// цикл на уменьшение
		{
			down = 0;
			PORTC = 0b00000010;
			PORTD = nums[y--];
 110:	9c 01       	movw	r18, r24
			if (y == 10) y = 0;	// сброс счетчика при достижении лимита 
		}
		if (PINB == 0b00000001) down = 1;	// устанавливаем флаг
		if ((PINB == 0b00000011) && down == 1)	// цикл на уменьшение
		{
			down = 0;
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	b6 cf       	rjmp	.-148    	; 0x84 <main+0x26>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
