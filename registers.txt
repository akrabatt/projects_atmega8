
							//// AVR Atmega8 ////				

//////////ОБОЗНАЧЕНИЕ ПОРТОВ:

	1)DDRxn -- определение порта где x - буква порта(какой порт), а n - номер порта
			например DDRC3. 0 - ВХОД / 1 - ВЫХОД ---> PORTxn (0 - высокое входное напряжение
			1 - подтягивающий резистор)
			
	2)PORTxn -- подаем высокий уровень сигнала на пин(запись данных)PORTxn 
				(0 - высокое входное напряжение, низкий уровень сигнала на выходе МК
				1 - подтягивающий резистор, на выходе МК высокое напряжение)

	3)PINx -- считывание данных. 0 - низкий входной сигнал, 1 - высокий входной сигнал
	
	
//////////ЗАДЕРЖКА:

	1)_delay_ms() - задержка программы на установленное кол-во милисек.
				  подключается команда библиотекой <util/delay.h>


//////////ОБОЪЯВЛЕНИЕ:

	1)#define -- такой командой можно объявить что-то своё, например
			  #define three 3
			  
	2)#define F_CPU 1000000UL -- объявляем, что МК будет работать на
			частоте 1Мгц
			
			
//////////ЛОГИЧЕСКИЕ ОПЕРАЦИИ:

	1) >> -- сдвиг битов в право. PORTD = 0b00000110;  PORTD = PORTD >> 1; 
			(соответственно все единицы сдвинутся впрово на 1 (0b00000011))
			
	2) << -- запись бита в регистр например PORTD |= (1 << 3) - это значит
			записать единицу в 3 регистр, а все остальные регистры свободны 
			для других операций
			
			(обе комманды аналогичные)

	3)	| -- побитовое или. работает как обычный элемент или (01110001 | 00001101 = 01111101)
	
	4)	& -- логическое И. работает как обычный элемент И (00110110 & 01010010 = 00010010)
	
	5)	^ -- исключающая ИЛИ. выполняет сравнение двух бит и если один бит, НО НЕ ОБА !!!! 
			будет истинным, то он запишит единицу (00110110 ^ 01010010 = 01100100)
			
	6)	~ -- инверсия. применяя эту комманду происходит смена битов на противоположные
			(~0 = 1)
			
//////////ЛОГИЧЕСКИЕ КОНСТРУКЦИИ:

	1)	PORTВ |= (1 << 3) | (1 << 5) -- такая конструкция позволяет добавить еденицу в уже
										установленную матрицу
		
	2)	PORTD &= ~(1 << 4); -- такая конструкция позволяет обнулить бит в заданной матрице
		

//////////ТАЙМЕРЫ:	

			Для начала инициализируем таймер

			Timer Counter Control Register 

			

			/////0-Й 8-БИТНЫЙ ТАЙМЕР (всего их 3 в Atmega8)/////
			
			следующий синтаксис: 
				TCCR0 = 0b00000xxx

			000 -- таймер остановлен
			001 -- таймер запущен без предделителя 
			010 -- таймер запущен с предделителем 8
			011 -- таймер запущен с предделителем 64
			100 -- таймер запущен с предделителем 256
			101 -- таймер запущен с предделителем 1024
			110 -- тактирование будет происходить от внешнего источника(подключить внешний генератор 

			данные значения указанные выше для каждого счетчика индивидуальны

				   и единица будет записываться только при падении сигнала)
			111 -- тоже самое что и выше, но при подъеме сигнала

			Далее необходимо обнулить значение счетного таймера

			Timer Counter register -- TCNT0 8-битный регистер в который после 
			каждого определенного промежутка времени будет записываться 
			единица рекомендуется его обнулить перед началом

			Длительность каждого такта расчитываем по формуле:
			частота МК/предделитель (1000000/1024 = 977 Гц)
			Далее узнаем время 1/977 = 0,001024 мс
			т.е. каждые 0,001024 мс в регистр TCNT0 будет записываться единица


			/////1-Й ТАЙМЕР 16-ТИ БИТНЫЙ/////

			данный таймер имеет 2 регистра: TCCR1A; TCCR1B
			для каждого таймера регистр и счетчик будет отличаться 
			для этого таймера счетчик называется: TCNT1H; TCNT1L
			в этом счетчике сразу два регистра т.к. МК 8-ми битный, а 
			счетчик 16-ти битный поэтому он имеет 2 регистра по 8 бит.
			Запись значения происходит сначала в старший регистр, а 
			потом в младший т.е. сначала в TCNT1H, затем в TCNT1L, а
			считывание происходит НАОБОРОТ !!!
			В данные регистры будут записываться быты после истечения 
			одного такта. Для обнуления счетчика используется комманда
			TCNT1 = 0;

			характеристики: 1сек. / 1 000 000 Гц. = 0,000001
							0,000001ск.* 65535 тактв = 0,065535 - время заполнения счетчика. 

							Например воспользовавшись предделителем на 64
							мы умножаем время 0,065535 сек. * 64 = 4,19424 сек.

			При легкой записи просто инициализируем счетчик и ставим условия

			При сложной записи код будет иметь следующий вид:
			инициализируем таймер, а затем 2 регистра старший и младший т.е. 
			обнуляем их (регистры). При проверки выполняется проверка из 
			данных 2-х регистров. if (TCNT1L == 0 && TCNT1H == 0)... это с 
			нулями, а если например нам надо проверить значение 32768, то
			сначала надо перевести в двоичный код далее полученное 16 битное
			число разделить на 2 8 битных числа, а затем каждое число перевести 
			в десяичное и записать их в старший и младший регистры
			32768 -->> 1000 0000 0000 0000 получаем 1000 0000 в старший регистр 
			и 0000 0000 в младший регистр далее переводим их в десятичные числа: 
			128 в старший разряд и 0 в младший разряд  

			/////2-Й 8-МИ БИТНЫЙ ТАЙМЕР/////

			комманду для инициализации имеет идентичную: TCCR2
			счетный регистр: TCNT2
			В этом счетчике отсутствует тактирование от внешнего ненератора.о








