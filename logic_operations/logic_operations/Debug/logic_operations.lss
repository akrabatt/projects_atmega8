
logic_operations.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000541  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c2  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024b  00000000  00000000  00000bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bb  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	4d c0       	rjmp	.+154    	; 0xd0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h> // подключаем библиотеку задерки времени

int main(void)
{
    DDRD = 0b11111111;	// обозначаем порты D как выходы 
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
		// подаем низкий уровень сигнала на выход
	
    DDRB = (0 << 0) | (0 << 1);	// обозначаем выходы кнопок 
  3c:	17 ba       	out	0x17, r1	; 23
    PORTB = (1 << 0) | (1 << 1);	// включаем подтягивающий резистор 
  3e:	83 e0       	ldi	r24, 0x03	; 3
  40:	88 bb       	out	0x18, r24	; 24
	
	int up = 0;	// счетчик на увеличене
	int down = 0;	// счетчик на уменьшение
	int count = 0;	// счетчик для светодиодов 
  42:	40 e0       	ldi	r20, 0x00	; 0
  44:	50 e0       	ldi	r21, 0x00	; 0
	
    DDRB = (0 << 0) | (0 << 1);	// обозначаем выходы кнопок 
    PORTB = (1 << 0) | (1 << 1);	// включаем подтягивающий резистор 
	
	int up = 0;	// счетчик на увеличене
	int down = 0;	// счетчик на уменьшение
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	30 e0       	ldi	r19, 0x00	; 0
		// подаем низкий уровень сигнала на выход
	
    DDRB = (0 << 0) | (0 << 1);	// обозначаем выходы кнопок 
    PORTB = (1 << 0) | (1 << 1);	// включаем подтягивающий резистор 
	
	int up = 0;	// счетчик на увеличене
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	03 c0       	rjmp	.+6      	; 0x56 <__SREG__+0x17>
		}
		if(~PINB & (1 << 1)) down = 1;	// при нажатии на вторую кнопку ставим флаг на уменьшение 
		if(PINB & (1 << 1) && down == 1)
		{
			down = 0;
			PORTD = (1 << count--);
  50:	ab 01       	movw	r20, r22
			}
		}
		if(~PINB & (1 << 1)) down = 1;	// при нажатии на вторую кнопку ставим флаг на уменьшение 
		if(PINB & (1 << 1) && down == 1)
		{
			down = 0;
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	30 e0       	ldi	r19, 0x00	; 0
	int count = 0;	// счетчик для светодиодов 
	
 
    while (1)
	{
		if(~PINB & (1 << 0)) up = 1;	// при нажатии на превую кнопку ставим флаг на увеличение 
  56:	b0 99       	sbic	0x16, 0	; 22
  58:	02 c0       	rjmp	.+4      	; 0x5e <__SREG__+0x1f>
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	90 e0       	ldi	r25, 0x00	; 0
		if(PINB & (1 << 0) && up == 1)
  5e:	b0 9b       	sbis	0x16, 0	; 22
  60:	1a c0       	rjmp	.+52     	; 0x96 <__SREG__+0x57>
  62:	81 30       	cpi	r24, 0x01	; 1
  64:	91 05       	cpc	r25, r1
  66:	b9 f4       	brne	.+46     	; 0x96 <__SREG__+0x57>
		{
			up = 0;
			PORTD = (1 << count++);
  68:	ba 01       	movw	r22, r20
  6a:	6f 5f       	subi	r22, 0xFF	; 255
  6c:	7f 4f       	sbci	r23, 0xFF	; 255
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <__SREG__+0x39>
  74:	88 0f       	add	r24, r24
  76:	99 1f       	adc	r25, r25
  78:	4a 95       	dec	r20
  7a:	e2 f7       	brpl	.-8      	; 0x74 <__SREG__+0x35>
  7c:	82 bb       	out	0x12, r24	; 18
			if(count >= 9)
  7e:	69 30       	cpi	r22, 0x09	; 9
  80:	71 05       	cpc	r23, r1
  82:	34 f0       	brlt	.+12     	; 0x90 <__SREG__+0x51>
			{
			count = 0;
			PORTD = 0b00000000;	
  84:	12 ba       	out	0x12, r1	; 18
		{
			up = 0;
			PORTD = (1 << count++);
			if(count >= 9)
			{
			count = 0;
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
    while (1)
	{
		if(~PINB & (1 << 0)) up = 1;	// при нажатии на превую кнопку ставим флаг на увеличение 
		if(PINB & (1 << 0) && up == 1)
		{
			up = 0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	03 c0       	rjmp	.+6      	; 0x96 <__SREG__+0x57>
			PORTD = (1 << count++);
  90:	ab 01       	movw	r20, r22
    while (1)
	{
		if(~PINB & (1 << 0)) up = 1;	// при нажатии на превую кнопку ставим флаг на увеличение 
		if(PINB & (1 << 0) && up == 1)
		{
			up = 0;
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
			{
			count = 0;
			PORTD = 0b00000000;	
			}
		}
		if(~PINB & (1 << 1)) down = 1;	// при нажатии на вторую кнопку ставим флаг на уменьшение 
  96:	b1 99       	sbic	0x16, 1	; 22
  98:	02 c0       	rjmp	.+4      	; 0x9e <__SREG__+0x5f>
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
		if(PINB & (1 << 1) && down == 1)
  9e:	b1 9b       	sbis	0x16, 1	; 22
  a0:	da cf       	rjmp	.-76     	; 0x56 <__SREG__+0x17>
  a2:	21 30       	cpi	r18, 0x01	; 1
  a4:	31 05       	cpc	r19, r1
  a6:	b9 f6       	brne	.-82     	; 0x56 <__SREG__+0x17>
		{
			down = 0;
			PORTD = (1 << count--);
  a8:	ba 01       	movw	r22, r20
  aa:	61 50       	subi	r22, 0x01	; 1
  ac:	71 09       	sbc	r23, r1
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__SREG__+0x79>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4a 95       	dec	r20
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <__SREG__+0x75>
  bc:	22 bb       	out	0x12, r18	; 18
			if(count <= 0)
  be:	16 16       	cp	r1, r22
  c0:	17 06       	cpc	r1, r23
  c2:	34 f2       	brlt	.-116    	; 0x50 <__SREG__+0x11>
			{
				count = 0;
				PORTD = 0b00000000;
  c4:	12 ba       	out	0x12, r1	; 18
		{
			down = 0;
			PORTD = (1 << count--);
			if(count <= 0)
			{
				count = 0;
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
		if(~PINB & (1 << 1)) down = 1;	// при нажатии на вторую кнопку ставим флаг на уменьшение 
		if(PINB & (1 << 1) && down == 1)
		{
			down = 0;
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	c3 cf       	rjmp	.-122    	; 0x56 <__SREG__+0x17>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
