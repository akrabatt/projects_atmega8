
timer_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000522  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b3  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000215  00000000  00000000  00000b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002aa  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	27 c0       	rjmp	.+78     	; 0x84 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
	DDRD = 0b11111111; // обозначаем все порты на выход
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;    // высокое входное напряжение
  3c:	12 ba       	out	0x12, r1	; 18
	
	DDRB = (0 << 0) | (0 << 1);	// инициализируем кнопку
  3e:	17 ba       	out	0x17, r1	; 23
	PORTB = (1 << 0) | (1 << 1);
  40:	83 e0       	ldi	r24, 0x03	; 3
  42:	88 bb       	out	0x18, r24	; 24

	TCCR0 |= (1 << CS00) | (1 << CS02) ;    // включаем таймер с предделителем частоты 1024
  44:	83 b7       	in	r24, 0x33	; 51
  46:	85 60       	ori	r24, 0x05	; 5
  48:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0;	// сбрасываем таймер в ноль 
  4a:	12 be       	out	0x32, r1	; 50
	
	int a = 0;	// переменная для сложения значений таймера
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1)
	{
		if (~PINB & (1 << 0))
  50:	b0 99       	sbic	0x16, 0	; 22
  52:	14 c0       	rjmp	.+40     	; 0x7c <__SREG__+0x3d>
		{
			
			if(TCNT0 == 100)
  54:	22 b7       	in	r18, 0x32	; 50
  56:	24 36       	cpi	r18, 0x64	; 100
  58:	11 f4       	brne	.+4      	; 0x5e <__SREG__+0x1f>
			{
				a++;
  5a:	01 96       	adiw	r24, 0x01	; 1
				TCNT0 = 0;
  5c:	12 be       	out	0x32, r1	; 50
			}
			if (a == 6)
  5e:	86 30       	cpi	r24, 0x06	; 6
  60:	91 05       	cpc	r25, r1
  62:	11 f4       	brne	.+4      	; 0x68 <__SREG__+0x29>
			{
				PORTD = 0b10101010;
  64:	2a ea       	ldi	r18, 0xAA	; 170
  66:	22 bb       	out	0x12, r18	; 18
			}
			if (a == 12)
  68:	8c 30       	cpi	r24, 0x0C	; 12
  6a:	91 05       	cpc	r25, r1
  6c:	11 f4       	brne	.+4      	; 0x72 <__SREG__+0x33>
			{
				PORTD = 0b01010101;
  6e:	25 e5       	ldi	r18, 0x55	; 85
  70:	22 bb       	out	0x12, r18	; 18
			}
			if (a >= 18)
  72:	82 31       	cpi	r24, 0x12	; 18
  74:	91 05       	cpc	r25, r1
  76:	14 f0       	brlt	.+4      	; 0x7c <__SREG__+0x3d>
			{
				a = 0;
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		if (~PINB & (1 << 1))
  7c:	b1 99       	sbic	0x16, 1	; 22
  7e:	e8 cf       	rjmp	.-48     	; 0x50 <__SREG__+0x11>
		{
			PORTD = 0b00000000;
  80:	12 ba       	out	0x12, r1	; 18
  82:	e6 cf       	rjmp	.-52     	; 0x50 <__SREG__+0x11>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>
